#include <LiquidCrystal_I2C.h>
#include <stdlib.h>;
int teste, recorde, n = 0, j = 0, cont = 1, i = 0, ordem_leds[500], timer = 1000, led_random, on_off, cont = 6, estado_botao[4];
const int ledLaranja = 6, ledAzul = 7, ledVerde = 8, ledAmarelo = 9;
const int botaoLaranja = 2, botaoAzul = 3, botaoVerde = 4, botaoAmarelo = 5;
void setup()
{
  pinMode(botaoLaranja, INPUT);
  pinMode(botaoAzul, INPUT);
  pinMode(botaoVerde, INPUT);
  pinMode(botaoAmarelo, INPUT);
  pinMode(ledLaranja, OUTPUT);
  pinMode(ledAzul, OUTPUT);
  pinMode(ledVerde, OUTPUT);
  pinMode(ledAmarelo, OUTPUT);
}
void loop()
{ //é necessário verificar a ordem de inserção dos leds; essa verificação deve ocorrer fora do while;
  teste = 0;
  recorde = 0; //reinicia o recorde e o teste caso o usuário tenha recomeçado a jogar;
  while(teste != -1) //gerando acendimento aleatório dos leds até que o usuário erre a sequência
  {
    while(n < cont)//aumentando o número de acendimentos conforme o usuário avança os níveis
    {	led_random = random(6, 10);
    	ordem_leds[i] = led_random; //é preciso inicializar a variável ordem_leds??
      	digitalWrite(led_random, HIGH);
    	delay(timer);
    	digitalWrite(led_random, LOW);
     	i++;
     	n++;
    }
    //print: "insira a sequência dos leds!!"
    while(j <= i) //verificando a ordem inserida pelo usuário
    {	estado_botao[0] = digitalRead(botaoLaranja); //necssário corrigir a lógica de verificação dos botões
    	estado_botao[1] = digitalRead(botaoAzul);
    	estado_botao[2] = digitalRead(botaoVerde); //verificando a ativação de cada botão
    	estado_botao[3] = digitalRead(botaoAmarelo);
     	switch(ordem_leds[j])
        {
          case 6: if(estado_botao[0] == HIGH) //nesse caso, somente está verificando se o botão for apertado
          			recorde++;                //necessário fazer a verificação em ordem 
          break;
          case 7: if(estado_botao[1] == HIGH) //se o botão foi ativado, irá ser registrado o acerto
          			recorde++;
          break;
          case 8: if(estado_botao[2] == HIGH)
          			recorde++;
          break;
          case 9: if(estado_botao[3] == HIGH)
          			recorde++;
          break;
          default:
          //print: "tente novamente"
          teste == -1;
        }
    }
    cont++; //número do nível que o jogador está
    n = 0;
    i = 0;
    j = 0; //contadores que são utilizados para a manipulação dos dados dentro dos loopings
  }
 
}
